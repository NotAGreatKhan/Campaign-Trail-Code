distributeSeatsUK = () => {
    //Only let this function run once per game.
    e.distributedseats;
    if (e.distributedseats === 1) {return;}
    e.distributedseats = 1;

    // Helper functions
    function get_state_threshold(state) {
        // input: state id of current state
        // output: float between 0.0 and 1.0, determining the minimum
        // percent to pass the states' threshold
        //if (state == 475) {return 0.1}
        //if (state == 460) {return 0}

        // Conservative thresholds
        if (state == 12506 && c == 12565) {return 0.25} // Scotland
        if (state == 12446 && c == 12565) {return 0.275} // North East England
        if (state == 12452 && c == 12565) {return 0.35} // North West England 
        // Lib Dem thresholds
        if (state == 12482 && c == 12587) {return 0.325} // London
        if (state == 12488 && c == 12587) {return 0.35} // South East 
        if (state == 12500 && c == 12587) {return 0.375} // Wales
        if (state == 12446 && c == 12587) {return 0.38} // North East England
        if (state == 12452 && c == 12587) {return 0.25} // North West England
        if (state == 12458 && c == 12587) {return 0.33} // Yorkshire
        if (state == 12476 && c == 12587) {return 0.3} // East of England
        if (state == 12464 && c == 12587) {return 0.35} // East Midlands
        if (state == 12506 && c == 12587) {return 0.3} // Scotland
        // Thresholds
        if (state == 12446) {return 0.099} // North East England
        if (state == 12452) {return 0.1} // North West England
        if (state == 12458) {return 0.11} // Yorkshire
        if (state == 12464) {return 0.11} // East Midlands
        if (state == 12470) {return 0.11} // West Midlands
        if (state == 12476) {return 0.11} // East of England
        if (state == 12482) {return 0.12} // London
        if (state == 12488) {return 0.12} // South East
        if (state == 12494) {return 0.12} // South West
        if (state == 12500) {return 0.11} // Wales
        if (state == 12506) {return 0.09} // Scotland
        if (state == 12512) {return 0.05} // Northern Ireland
        return 0;
    }

    function get_guarenteed_seats(state, c) {
        // input: state id and candidate id
        // output: int, number of seats c is guarenteed in state
        //if (state == 466 && c == 80) {return 2}
        //if (state == 460 && c == 80) {return 20}
        // Conservatives
        if (state == 12506 && c == 12565) {return 1} // Scotland
        if (state == 12446 && c == 12565) {return 1} // North East England
        if (state == 12452 && c == 12565) {return 8} // North West England        
        // Independent/Others
        if (state == 12500 && c == 12667) {return 1} // Wales        
        // Lib Dems elsewhere
        if (state == 12464 && c == 12587) {return 1} // East Midlands
        if (state == 12482 && c == 12587) {return 8} // London
        if (state == 12500 && c == 12587) {return 3} // Wales
        if (state == 12446 && c == 12587) {return 1} // North East England
        if (state == 12452 && c == 12587) {return 5} // North West England
        if (state == 12458 && c == 12587) {return 2} // Yorkshire
        if (state == 12476 && c == 12587) {return 2} // East of England
        if (state == 12506 && c == 12587) {return 10} // Scotland        
        // Northern Ireland
        if (state == 12512 && c == 12685) {return 9}
        if (state == 12512 && c == 12703) {return 5}
        if (state == 12512 && c == 12757) {return 3}
        if (state == 12512 && c == 12739) {return 1}
        // Lib Dems in South of England
        if (state == 12494 && c == 12587) {return 3} // South West
        if (state == 12488 && c == 12587) {return 5} // South East
        // Speaker in Scotland
        if (state == 12506 && c == 12775) {return 1}
        return 0;
    }

    // zero out national seat counts
    for(var ci = 0; ci < e.final_overall_results.length; ci++) {
        e.final_overall_results[ci].electoral_votes = 0;
    }

    //loop over each state's results
    for(var i = 0; i < e.final_state_results.length; i++) {
        var state = e.final_state_results[i].state;
        
        // Store the index of the state in the final_state_results array.
        var fsrIndex = e.final_state_results.map(f=>f.state).indexOf(state);
        
        // Store a read only copy of the state's results (for convenience)
        var stateData = e.final_state_results[fsrIndex];

        // Get the state's total popular votes and seats.
        var tot_state_votes = e.states_json[e.states_json.map(f=>f.pk).indexOf(state)].fields.popular_votes;
        var seats_left = e.states_json[e.states_json.map(f=>f.pk).indexOf(state)].fields.electoral_votes;
        
        // Begin tracking how many votes are actually competitive.
        var competitivevotes = 0;

        // First loop over each party in state
        for(var j = 0; j < stateData.result.length; j++) {
            var c = stateData.result[j].candidate;

            // Zero out seats in that state
            e.final_state_results[fsrIndex].result[j].electoral_votes = 0;

            // Count the candidate's votes if and only if they pass the state threshold
            var cur_c_votes = stateData.result[j].votes * 1.0;
            var cur_c_to_totvotes = cur_c_votes / tot_state_votes
            if (cur_c_to_totvotes >= get_state_threshold(state)) {
                competitivevotes += cur_c_votes
            }

            // Add guarenteed seats to minor parties (greens?)
            var guarenteed_seats = get_guarenteed_seats(state, c)
            if (guarenteed_seats > 0) {
                seats_left -= guarenteed_seats

                // Give the party those seats in that state.
                e.final_state_results[fsrIndex].result[j].electoral_votes += guarenteed_seats;

                // Then add the seats to the national total.
                e.final_overall_results[e.final_overall_results.map(f=>f.candidate).indexOf(c)].electoral_votes += guarenteed_seats;
            
            }

        }

        // By default, this is * 1.0. 

        var votes_per_seat = (competitivevotes * 1.6) / seats_left

        // Second loop: Actually add seats
        for(var j = 0; j < stateData.result.length; j++) {
            // Calculate what percent of the seats should be won.
            var c = stateData.result[j].candidate;
            var cur_c_votes = stateData.result[j].votes;
            var seats = Math.floor(cur_c_votes * 1.0 / votes_per_seat)

            // Calculate your percent of votes.
            var cur_c_votes = stateData.result[j].votes * 1.0;
            var cur_c_to_totvotes = cur_c_votes / tot_state_votes

            // Add seats if there are any to add and you meet the threshold
            if (seats > 0 && cur_c_to_totvotes >= get_state_threshold(state)) {
                seats_left -= seats;

                e.final_state_results[fsrIndex].result[j].electoral_votes += seats;
                e.final_overall_results[e.final_overall_results.map(f=>f.candidate).indexOf(c)].electoral_votes += seats;
            }
        }

        // Give any remaining seats to first place. simulate FPTP biasing towards first
        if (seats_left > 0) {
            var c = stateData.result[0].candidate;
            e.final_state_results[fsrIndex].result[0].electoral_votes += seats_left;
            e.final_overall_results[e.final_overall_results.map(f=>f.candidate).indexOf(c)].electoral_votes += seats_left;
        }
    }

}

let observerRunning = false;
let changeChartRunning = false;
let mcaHeightRunning = false;
let processedNodes = new Set();

async function handleMutations(mutationsList, observer) {
    if (observerRunning) return;
    observerRunning = true;

    // stop observing
    observer.disconnect();

    // addScrollbar
    const overallResult = document.getElementById('overall_result');
    if (overallResult && !processedNodes.has(overallResult)) {
        overallResult.style.overflow = 'auto';
        const buttons = document.querySelectorAll('#view_electoral_map, #answer_select_button, #ok_button, #final_election_map_button');
        const handleClick = () => {
            overallResult.style.overflow = 'auto';
        };
        buttons.forEach(button => button.addEventListener('click', handleClick));
        processedNodes.add(overallResult);
    }

    // changechart
    if (!changeChartRunning) {
        changeChartRunning = true;
        const elementIDs = ["overall_vote_statistics", "state_result_data_summary", "overall_details_container"];
        for(let id of elementIDs) {
            let element = document.getElementById(id);
            if (element && !processedNodes.has(element)) {
                let overallthing = element.innerHTML;
                overallthing = overallthing.replace("Electoral Votes","Allocated Seats");
                overallthing = overallthing.replace("Candidate","Party List");
                overallthing = overallthing.replace("Running Mate","Party Leader");
                element.innerHTML = overallthing;
                processedNodes.add(element);
            }
        }
        changeChartRunning = false;
    }
 // mcaHeight
    if (!mcaHeightRunning) {
        mcaHeightRunning = true;
        let results_container = document.getElementById("results_container");
        let chart = document.getElementById("myChart");
        if (results_container && !processedNodes.has(results_container)) {
            if (!chart){
                results_container.style.height = "98%";
                results_container.style.overflow = "scroll";
            } else {
                let mca = document.getElementById("main_content_area");
                if (mca) {
                    mca.style.height = "80%";
                }
            }
            processedNodes.add(results_container);
        }
        mcaHeightRunning = false;
    }

    // Resume observing
    observer.observe(document.documentElement, { childList: true, subtree: true });
    observerRunning = false;
}

let singleObserver = new MutationObserver(handleMutations);
singleObserver.observe(document.documentElement, { childList: true, subtree: true });
    

campaignTrail_temp.multiple_endings=true
endingPicker = (out, totv, aa, quickstats) => {

distributeSeatsUK();

function onGameWindowChangeCandidates() {
    const resultsTableHolder = document.getElementById("overall_details_container");

    if (!resultsTableHolder || resultsTableHolder.classList.contains("done")) {
        return;
    }

    resultsTableHolder.classList.add("done");

    const resultsTable = resultsTableHolder.childNodes[3].childNodes[3].children[0];

    for (let i = 0; i < resultsTable.children.length; i++) {
        const row = resultsTable.children[i];
        let name = row.firstChild.innerText;
        row.insertCell(1);
        if (name) {
            name = name.replaceAll("-", "").trim();
        }

        if (i == 0) {
            row.children[1].innerHTML = `<span style="font-weight:bold">Running Mate</span>`;
        } else {
            row.children[1].innerHTML = vpTable[name];
        }
    }

    const resultsTableHistorical = resultsTableHolder.childNodes[5].childNodes[3].children[0];

    for (let i = 0; i < resultsTableHistorical.children.length; i++) {
        const row = resultsTableHistorical.children[i];
        let name = row.childNodes[1].innerText;
        row.insertCell(1);
        if (name) {
            name = name.replaceAll("-", "").trim();
        }

        if (i == 0) {
            row.children[1].innerHTML = `<span style="font-weight:bold">Running Mate</span>`;
        } else {
            row.children[1].innerHTML = vpTableHistorical[name];
        }
    }

    // Add CSS to increase row spacing
    const styleElem = document.createElement('style');
    styleElem.textContent = `
        #overall_details_container table tr {
            line-height: 1.5; /* Adjust line height as needed */
        }
    `;
    document.head.appendChild(styleElem);
}

const gameWindowNode = document.getElementById("game_window");
const candidateWatcherConfig = { attributes: true, childList: true, subtree: true };

const candidateObserver = new MutationObserver(onGameWindowChangeCandidates);
candidateObserver.observe(gameWindowNode, candidateWatcherConfig);

function updateHistoricalData(newVpTable, newHexColors, newNames, newEvs, newPvs, newPvps) {
    vpTableHistorical = newVpTable;
    HistHexcolour = newHexColors;
    HistName = newNames;
    HistEV = newEvs;
    HistPV = newPvs;
    HistPVP = newPvps;
}


construct = (a = 1) => {
      
    e.page = e.page + a < e.pages.length ? e.page + a : 0
    let html = e.header;
    html += e.pages[e.page] + "<br>";
    if (e.page > 0) {
    
    html += `<button onclick='endingConstructor(a = -1)'>Back</button>`
    }
    if (e.page < e.pages.length - 1) {
    
    html += `<button onclick='endingConstructor(a = 1)'>Next</button>`
    }
    for (i in e.executable) {
      if (e.executable[i][0] == e.page) {
          e.executable[i][1]();
        
      }
      }

    if (e.image == true)
    setTimeout(()=>{
      candImg = $(".person_image")[0]
      if (candImg) {
        candImg.remove()
        $("#final_results_description")[0].style = `
          text-align:left;
          width: 72%;
          display: block;
          margin-left: auto;
          margin-right: auto;
          color: #000000
        `
      }
    }, 10)
    else if (e.image)
    setTimeout(()=>{
      candImg = $(".person_image")[0];
      if (candImg) {
        candImg.src = e.image;
      }		
    }, 10)

    const resultsDescriptionElement = document.getElementById('final_results_description');
    if (resultsDescriptionElement) {
        resultsDescriptionElement.scrollTop = 0;
    }

return html;
}
      
      endingConstructor = (a = 1) => {
      $("#final_results_description")[0].innerHTML = construct(a);
      }
      
      
      e.multiple_endings = true;
      
      e.header = "<h1>Error</h1>";
      e.pages = ["<p>This is an error handler. Contact u/No-Reading</p>"];
      e.page = 0;
      
      endingPicker = (out, totv, aa, quickstats) => {

      
      e.pages = []
      e.header = "";
      e.executable = []


if (quickstats[0]<324 && aa[0].candidate == 12565) {
e.pages = [
"<h3 style='text-align: center;'>As Big Ben strikes 10, we can predict that the Conservatives have won the election, in a definitive repudiation of Tony Blair’s government.</h3><p>David Dimbleby’s voice rings out across the Party headquarters. You can almost hear your own raging heart amidst the Labour Party faithful, beseeched of their loss right in front of their face. The result hung like an albatross around the emotive neck of the crowd.</p><p>In your deepest, darkest conscience, you knew your fate had been etched into the political history books as soon as the exit poll blared out nation-wide. You clinged on though. You clinged on to any sparse hope – delusion really – of a victory, or at the very least a hung Parliament. But then the seat results come in. Constituency after constituency, colleague after colleague, falling prey to a blue wave of resurgent Conservatives. The sprawling growths of red on the map, cauterized and shrunk to their 20th century splotches.</p><p>As your mind wanders the spiritual wabash, you ponder back to all of those vain weights to the campaign. Every mistake you made, every decision that spurred on those damn protests, every attack that you let run amuck in the media. Where was the election-winning machine Tony Blair? Why didn’t his heart beat with middle Britain this time around? What made him lose to such a weak opposition? Those are the headlines that will brand the papers in the following days – hell, even hours. Michael Howard is going to be Prime Minister by the next setting of the sun, setting on the twilight of the Social Democratic Britain you toiled so hard to try and build. It was all for nothing, the spin doctoring, the tireless campaigning, the haggling through Parliament. All of it will be washed away under the Tory-blue wave that burned your eyes tonight. Your ideals of a stronger, safer nation, burnt to ashes under the boots’ heel of that goddamn war.</p><p>Following such an electoral slaughterhouse, your resignation as Party Leader is assured, and no politicking will change that. Gordon Brown, having had the privilege of quietly doing his work out of the spotlight, will most likely win any leadership election to succeed you. He will provide a more measured, if marginally more parched voice to the Opposition. Even Prime Minister-Elect Howard may not last too long himself, with his age being cited as an issue among journalists. But it won’t be you at that dispatch box, that’s all that truly matters to your ambitious mind. If only Alastair could’ve done something. If only…</p><p>After more than a childhood’s worth of Conservative rule, you did not even get to serve half of that time as Prime Minister. And now, those sniveling sky-blue Tories will scurry their way back into government.</p><p>You can almost feel John Smith’s sorrowful bitterness at you, sighing pitifully down your back, as you stare into the void.</p><p>Into the abyss.</p>"
]
e.executable.push([0, (() => {e.image = e.image = "https://imgur.com/0bqHDaj.png"})])
} 

else if (aa[0].electoral_votes < 324 && aa[1].electoral_votes < 324 && aa[2].electoral_votes < 324 && aa[3].electoral_votes < 324 && aa[4].electoral_votes < 324 && aa[5].electoral_votes < 324 && aa[6].electoral_votes < 324 && aa[7].electoral_votes < 324 && aa[8].electoral_votes < 324 && aa[9].electoral_votes < 324 && aa[10].electoral_votes < 324 && aa[11].electoral_votes < 324 && aa[12].electoral_votes < 324 && aa[13].electoral_votes < 324) {
e.pages = [
"<h3 style='text-align: center;'>As Big Ben strikes 10, we can predict a hung Parliament for Britain, this is certainly a let down for Labour.</h3><p>It seems as though you, and the nation, share the utter surprise evident in David Dimbleby’s voice. Nobody really anticipated this outcome, save for the Liberal Democrat hopefuls wishing to finally break into government. Whilst this is certainly disappointing for national security reforms you were hoping to make, there is an avenue for continued governance with a coalition via the Liberal Democrats if you are able to form such a government. Regardless of the outcome, it is clear the LibDems are significant winners tonight, and will make governance a multi-faceted task to perform.</p><p>Your mind wonders the many possibilities that could’ve unfolded, anything, just anything, better than this folly of a deadlock. What really went wrong? Was it the Iraq War? Was it the blasted attacks hurled at you? Whatever it was, it is likely you will resign as party leader within the next 1 to 2 years at the maximum.</p><p>Just when you thought you were past the thick of it, another roadblock has been lobbed at you. Coalition negotiations are going to be tough, but depending on the seat shares, there could be a viable way out for you. Strap in, Tony, because it’s going to be quite the few days ahead of you…</p>"
]
e.executable.push([0, (() => {e.image = e.image = "https://imgur.com/ZVxm7Y7.png"})])
} 

else if (quickstats[0] >= 324 && quickstats[0]<340) {     
e.pages = [
"<h3 style='text-align: center;'>As Big Ben strikes 10, we can predict that the Labour Party has won, though with a narrow majority in Parliament.</h3><p>As David Dimbleby’s voice rings out on the television screen, trepidation grips your conscience and the Labour HQ. You have clinched a victory, but you have bled a lot of colleagues and seats as a result of this gruelling campaign, no doubt due to the Iraq War and the simple fact that Ian Duncan Smith is no longer existent in national politics.</p><p>With a majority secured, you may be able to pursue those national security reforms you have desired for so long now. With how slim your majority is in Parliament though, don’t count on it to go too smoothly. All it would take is a significant amount of whip suspensions, resignations and by-election defeats, to eradicate your majority all together. Suffice to say, Gordon Brown is definitely going to be crossing his fingers whenever you resign in the near future.</p><p>You fought with all you could, but in the end, only the most pitiful dividend was handed out. Best of luck, Prime Minister, you’re sure as hell going to need it.</p>"
]
e.executable.push([0, (() => {e.image = e.image = "https://imgur.com/2Vtwwm7.jpg"})])
} 

else if (quickstats[0] >= 340 && quickstats[0]<355) {     
e.pages = [
"<h3 style='text-align: center;'>As Big Ben strikes 10, we can predict that the Labour Party has won, and with a modest majority in Parliament.</h3><p>As David Dimbleby’s voice rings out on the television screen, you let out a small, and reserved, sigh of relief. You have retained your position as PM. Even in spite of this, you have bled a lot of support to the Liberal Democrats and Conservatives. A lackluster performance, by your standards. At least for now, you can rest easy knowing your majority can survive some resignations here and there.</p><p>With this majority secured, you may be able to pursue those national security reforms you have desired for so long now. Though with how controversial they’ll be, don’t bet all of your cards on it going smoothly with your modest majority. Gordon Brown will definitely be crossing his fingers whenever you resign.</p><p>You fought through the battle with all you could, but only a tepid endorsement of your agenda was given to you. Best of luck, Prime Minister, because you sure as hell are going to need it.</p>"
]
e.executable.push([0, (() => {e.image = e.image = "https://imgur.com/2Vtwwm7.jpg"})])
} 

else if (quickstats[0] >= 355 && quickstats[0]<370) {
e.pages = [
"<h3 style='text-align: center;'>As Big Ben strikes 10, we can predict that the Labour Party has won, and with a strong majority in Parliament.</h3><p>As David Dimbleby’s voice rings out on the television screen, you let out perhaps the biggest sigh of relief of your premiership. Despite the significant bleeding of support, you have held on to your position as PM. Though for someone such as yourself, this isn’t exactly a spectacular performance.</p><p>Now that you have snatched a secure Parliament, you should have little trouble in pursuing those national security reforms you have desired for a while now. Take some caution though, you have still bled a lot of colleagues as a result of this election. Your Chancellor is still going to be crossing his fingers for this, that’s for sure.</p><p>You fought the battle with all you could, yet the lion’s share was handed out hesitantly and mildly. Best of luck for your remaining years, Prime Minister, you’ll have a tough last few years ahead of you.</p>"
]
e.executable.push([0, (() => {e.image = e.image = "https://imgur.com/2Vtwwm7.jpg"})])
} 

else if (quickstats[0] >= 370 && quickstats[0]<419) {    
e.pages = [
"<h3 style='text-align: center;'>As Big Ben strikes 10, we can predict that the Labour Party has won, and that a landslide is likely in the election.</h3><p>As David Dimbleby’s voice rings out on the television screen, a resounding cheer erupts throughout the crowd gathered to witness the results. You’ve done it! Despite the festering pressures abroad, despite the growing controversy of your premiership, and despite the renewed strength of the Tories and Liberal Democrats, you persevered to carry three successive landslide victories for your party. Your colleagues will certainly be thanking you for aiding in their retaining of their seats.</p><p>With this commanding majority in Parliament, you should have little difficulty in passing those reforms on national security you have desired for so long. Whenever you do end up resigning, Gordon Brown will definitely be satisfied with the majority you have left for him. It seems that at least for now, New Labour will sustain itself for at least 5 years to come. Perhaps, even more.</p><p>You fought, you triumphed, and in the end, the lion’s share has handsomely fallen into your grasp. Whilst I will of course wish you the best of luck, it seems you can likely do anything with this victory. Good luck Tony!</p>"
]
e.executable.push([0, (() => {e.image = e.image = "https://imgur.com/2Vtwwm7.jpg"})])
} 

else if (quickstats[0] >= 419 && quickstats[0]<500) {    
e.pages = [
"<h3 style='text-align: center;'>As Big Ben strikes 10, we can predict that the Labour Party has won in a landslide, surpassing their record in 1997!</h3><p>As David Dimbleby’s voice rings out on the television screen, the Labour Party HQ shudders and rumbles under the enthusiastic — almost riotous — jiving of the crowds. The amateur dancing of the members, unequivocally dispelling any jitter suspected throughout election night.</p><p>Initially, your scepticism at the exit poll gets the better of you. But then, the seats come in... Constituency after constituency, MP after MP; A sea of red washing over the map, engulfing the entirety of the country. The sky-blue wave of the Conservatives washed away, and scattered by the orange locusts of Liberal Democrats. The Blairite legacy having fully cemented itself in the national zeitgeist.</p><p>Succeeding in such a total, and dominating, command over the House of Commons, you should have little trouble passing those national security reforms you have desired to obtain in the new terror-stricken millenia. It goes without saying that Gordon Brown is going to thank you when he takes over your office in the next Parliament.</p><p>After all of these long years, your fight in the political battlefield has yielded a triumph greater than any leader before you.</p><p>John Smith would be proud — you’re sure he would. If only Kier Hardie were here too. To see what we have achieved.</p>"
]
e.executable.push([0, (() => {e.image = e.image = "https://imgur.com/2Vtwwm7.jpg"})])    
} 

else if (quickstats[0] >= 500) {  
e.pages = [
"<h3 style='text-align: center;'>A Conversation between Prime Minister Tony Blair, and Communications Director Alastair Campbell. March 17, 2003, the day before the anti-war vote.</h3><p>[CAMPBELL]: This isn’t looking good, Tony, the upcoming commons vote, it could be the biggest rebellion of MPs in our government’s history.</p><p>[BLAIR]: Even more than the one for the Higher Education Act?</p><p>[CAMPBELL]: Even more than that.</p><p>[BLAIR]: There has to be something we can do to stem the flow of this… I hate to say this, but we may need to use that <i>other</i> intelligence MI5 was able to collate.</p><p>[CAMPBELL]: You mean, Operation <i>BIGSHOT</i>?</p><p>[BLAIR]: I’m afraid so, Alastair.</p><p>[CAMPBELL]: Damnit, it shouldn’t have even come close to this. I’ll get Peter in here, and talk it with him, should get the job done.</p><p>[BLAIR]: Good, we have to win this thing. For us. For Labour.</p><p>-End of Transcription.</p>"
]
e.executable.push([0, (() => {e.image = e.image = "https://imgur.com/VfQvbGe.png"})])
}

else if ((campaignTrail_temp.player_answers[0] == 13508) && quickstats[0]<324 && aa[0].candidate == 12543) {  
e.pages = [
"<h3 style='text-align: center;'>As Big Ben strikes 10, we can predict that the Conservatives have won this election, in a second and final death-blow to New Labour</h3>"
]
e.executable.push([0, (() => {e.image = e.image = ""})])
}

// Second Slides




return construct(0);
}   
}  

function getTooltips(str) {
    let matches = [];

    tooltipList.forEach((tooltip, index) => {
        // Adjust the regex to match searchString potentially surrounded by “ and followed by optional punctuation
       let regex = new RegExp(`(?<=\\b|\\s|^|“)${tooltip.searchString}(?=[.,;!?]?\\b|\\s|”|$)`, 'g');


        let match;
        while ((match = regex.exec(str)) !== null) {
            matches.push({
                start: match.index + (match[0].startsWith('“') ? 1 : 0), // Adjust for potential starting “
                end: match.index + match[0].length - (match[0].endsWith('”') ? 1 : 0) - (match[2] ? 1 : 0), 
                tooltipIndex: index
            });
        }
    });

    // Sort by starting position; if two start at the same position, longer match comes first
    matches.sort((a, b) => a.start - b.start || b.end - b.start - (a.end - a.start));

    // Filter out overlaps
    for (let i = 0; i < matches.length - 1; ) {
        if (matches[i + 1].start < matches[i].end) {
            matches.splice(i + 1, 1); // Remove the next match since it overlaps
        } else {
            i++; // Move to next match
        }
    }

    return matches;
}
function applyTooltips(str) {
    const matches = getTooltips(str);
    let result = '';
    let lastIndex = 0;

    matches.forEach(match => {
        const tooltip = tooltipList[match.tooltipIndex];
        result += str.slice(lastIndex, match.start);
        result += `<span class='mytooltip'>${tooltip.searchString}<span class='mytooltiptext'>${tooltip.explanationText}</span></span>`;
        lastIndex = match.end;
    });

    result += str.slice(lastIndex); // Add the remainder of the original string
    return result;
}

function applyTooltipsToObject(obj) {
    for (let key in obj) {
        if (typeof obj[key] === 'string') {
            obj[key] = applyTooltips(obj[key]);
        } else if (typeof obj[key] === 'object') {
            applyTooltipsToObject(obj[key]); // Recursive call
        }
    }
}

applyTooltipsToObject(campaignTrail_temp.questions_json);
applyTooltipsToObject(campaignTrail_temp.answers_json);
applyTooltipsToObject(campaignTrail_temp.answer_feedback_json);
